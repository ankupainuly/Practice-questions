class Solution {

public:
    int numOfWays(vector<int>& nums) {
        int n=nums.size(),mod = pow(10,9)+7;
        vector<vector<int> > ncr(n+1,vector<int> (n+1,0));
         for(long i=0;i<n;i++) {
                ncr[i][0]=1;
                ncr[i][1]=i;
                ncr[i][i]=1;
        }
        
        for(int i=2;i<n;i++) {
            for(int j=1;j<n;j++) {
                ncr[i][j] = (ncr[i-1][j]%mod + ncr[i-1][j-1]%mod)%mod;
            }
        }
        long long ans = count(nums,mod,ncr);
        return ans-1;
    }
    
    long long count(vector<int>& nums,int mod,vector<vector<int> > &ncr){
        if(nums.size()==0 || nums.size()==1) return 1;
        vector<int> l,r;
        for(auto i:nums) {
            if(i<nums[0]) l.push_back(i);
            else if(i>nums[0]) r.push_back(i);
        }
        
        int lc=l.size(),rc=r.size();
        int res=(count(l,mod,ncr)%mod * count(r,mod,ncr)%mod * ncr[lc+rc][rc]%mod);
        return res;
    }
};
